class TrieNode {
public:
    // Initialize your data structure here.
    TrieNode() 
    {
     isWord = false;
     for(int i = 0;i<26;i++)
       children[i] = NULL;
    }
    bool isWord;
    TrieNode *children[26];
};

class Trie {
public:
    Trie() {
        root = new TrieNode();
    }

    // Inserts a word into the trie.
    void insert(string word) {
        int n = word.size();
        TrieNode* node = root;
        for(int i = 0;i<n;i++)
        {
            char _char = word[i];
            if(node->children[_char-'a'] == NULL)
                node->children[_char-'a'] = new TrieNode();
            node = node->children[_char-'a'];
        }
        node->isWord = true;
    }
 
    /**********************************************************************/
    /* solution is from webiste, it is using the DFS to solve this problem*/
    bool search(string word) {
        return search_helper(word,0,root);
    }
    bool search_helper(string& word,int layer, TrieNode *cur) {
        if (!cur) return false;
        if (layer == word.size()) return cur->isWord;
        if (word[layer] != '.') {
             return search_helper(word,layer+1, cur->children[word[layer] - 'a']);
        } else {
            for (int i = 0; i <= 25; i++) {
                if (search_helper(word,layer+1, cur->children[i])) 
                    return true; //early termination
            }
            return false;
        }
    }
    /******************************************************************/
private:
    TrieNode* root;
};

class WordDictionary {
public:

    // Adds a word into the data structure.
    void addWord(string word) {
        trie.insert(word);
    }

    // Returns if the word is in the data structure. A word could
    // contain the dot character '.' to represent any one letter.
    bool search(string word) {
        trie.search(word);
    }
private:
Trie trie;
};

// Your Trie object will be instantiated and called as such:
// Trie trie;
// trie.insert("somestring");
// trie.search("key");

// Your WordDictionary object will be instantiated and called as such:
// WordDictionary wordDictionary;
// wordDictionary.addWord("word");
// wordDictionary.search("pattern");
