Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.

Note:

    Elements in a triplet (a,b,c) must be in non-descending order. (ie, a ≤ b ≤ c)
    The solution set must not contain duplicate triplets.

    For example, given array S = {-1 0 1 2 -1 -4},

    A solution set is:
    (-1, 0, 1)
    (-1, -1, 2)


class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        int n = nums.size();
        vector<vector<int>> result;
        if(n<3) return result;
        sort(nums.begin(),nums.end());
        int left,right;
        for(int i = 0 ;i < n;i++)
        {
            int target = 0-nums[i];
            left = i+1;
            right = n-1;
            while(left<right)
            {
                if(nums[left]+nums[right]<target) left++;
                else if (nums[left]+nums[right]>target) right--;
                else if(nums[left]+nums[right] == target)
                {
                     vector<int> ans{nums[i],nums[left],nums[right]};
                     result.push_back(ans);
                     left++;right--;
                     //avoid duplicates
                     while(left<right && nums[left]==nums[left-1])left++;
                     while(left<right && nums[right]==nums[right+1])right--;
               }
            }
            //avoid duplicates outside the iteration
            while(i<n-1 && nums[i] == nums[i+1])i++;
        }
        return result;
    }
};
