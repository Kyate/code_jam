Given two integers representing the numerator and denominator of a fraction, return the fraction in string format.

If the fractional part is repeating, enclose the repeating part in parentheses.

For example,

    Given numerator = 1, denominator = 2, return "0.5".
    Given numerator = 2, denominator = 1, return "2".
    Given numerator = 2, denominator = 3, return "0.(6)".


class Solution {
public:
    string fractionToDecimal(int numerator, int denominator) {
        if (denominator == 0) return "";
        if (numerator == 0) return "0";
        int sign = 1;
      
        if ((numerator < 0) ^ (denominator < 0)) sign = -1;
        
        //avoid overflow, convert it to long
        long num = numerator;
        long den = denominator;
        long rem,res;
        
        num = abs(num);
        den = abs(den);
        
        string ans = to_string(num/den);
        if(sign == -1) ans = '-' + ans;
        
        rem =  num%den;
        if (rem == 0) return ans;
        ans += ".";
        unordered_map<long,int>mymap;//<remainder, pos> here the math problem
        while(rem!=0)
        {
            if(mymap.find(rem)!=mymap.end())
            {
               int pos = mymap[rem];
               string s1 = ans.substr(0,pos);
               string s2 = ans.substr(pos,ans.size()-pos);
               return s1+"("+s2+")";
            }
            //continue
            mymap[rem] = ans.size();
            res = (rem*10)/den;
            ans = ans + to_string(res);
            rem = (rem*10)%den;
        }
        return ans;
    };
};
