/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int minDepth(TreeNode* root) {
        int depth = 0;
        if (!root) return depth;
        queue<TreeNode*> level;
        level.push(root);
        while (!level.empty()) {
            depth++;
            int n = level.size();
            for (int i = 0; i < n; i++) {
                bool lt = true, rt = true;
                TreeNode* node = level.front();
                level.pop();
                if (node -> left) level.push(node -> left);
                else lt = false;
                if (node -> right) level.push(node -> right);
                else rt = false;
                if (!lt && !rt) return depth;
            }
        }
    } 

/***************************recursive solution from online******************
    int minDepth(TreeNode* root) {
        if (!root) return 0;
        if (!(root -> left)) return minDepth(root -> right) + 1;
        if (!(root -> right)) return minDepth(root -> left) + 1;
        return min(minDepth(root -> left), minDepth(root -> right)) + 1;
    }
    ******************************************************/
    
 
 /**************** My solution ****************************   
     int minDepth(TreeNode* root) {
      if(root == NULL) return 0;
        min_height = INT_MAX;
        minDepth_helper(root, 1);
        return min_height;
    }
    void minDepth_helper(TreeNode*root, int h)
    {
        if(root == NULL )
        {
            if(h<min_height)
               min_height = h;
             return;
        }
        if(root->left || root->right)
        {
             if(root->left)  minDepth_helper(root->left, h+1);
             if(root->right) minDepth_helper(root->right,h+1);
        }
        else 
        {
            minDepth_helper(root->left, h);
            minDepth_helper(root->right, h);
        }
    }
    private:
    int min_height;
    ***************************************************/
};
