/********************************************
 Given an array nums, write a function to move all 0's to the end of it while maintaining the relative order of the non-zero elements.

For example, given nums = [0, 1, 0, 3, 12], after calling your function, nums should be [1, 3, 12, 0, 0].

Note:

    You must do this in-place without making a copy of the array.
    Minimize the total number of operations.
**************************************************************/



class Solution {
public:
    void moveZeroes(vector<int>& nums) {
        int n = nums.size();
        int left = 0,right;
        while(left<n)
        {
            if(nums[left]!=0)  left++;
            else
            {
                int i = left+1;
                while(nums[i]==0 && i<n) i++;
                right = i;
                if(right == n) break;
                swap(nums[left],nums[right]);
                left++;
            }
        }
    }
};

/*** another solution from online ***********
void moveZeroes(vector<int>& nums) {
    for (int r=0, w=0; r<nums.size(); ++r)
        if (nums[r])
            swap(nums[r], nums[w++]);
}
*********************************************/
