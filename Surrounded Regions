/***************************
 Given a 2D board containing 'X' and 'O', capture all regions surrounded by 'X'.

A region is captured by flipping all 'O's into 'X's in that surrounded region.

For example,

X X X X
X O O X
X X O X
X O X X

After running your function, the board should be:

X X X X
X X X X
X X X X
X O X X

*****************************/
class Solution {
public:
    void solve(vector<vector<char>>& board) {
        int m = board.size();
        if(m == 0) return ;
        int n = board[0].size();
        
        printf("m = %d, n = %d\n",m,n);
        
        //check the boarder
        for(int j=0;j<m;j++)
        {
            if(board[j][0] == 'O') 
                dfs(j,0,board);
            if(board[j][n-1] == 'O') 
                dfs(j,n-1,board);
        }
        
        for(int i=0;i<n;i++) 
        {
            if(board[0][i] == 'O')
                dfs(0,i,board);
            if(board[m-1][i] == 'O')
                dfs(m-1,i,board);
        }
        
        //make all '0' into 'x
          for(int j=0;j<m;j++)
            for(int i=0;i<n;i++)
            {
               if(board[j][i] == '#')
                   board[j][i] = 'O';
               else
                   board[j][i] = 'X';
            }

    }
    void dfs(int k,int l,vector<vector<char>>& board)
    {
        int m = board.size();
        int n = board[0].size();
        //if(k<0 || k>=m || l<0 || l >=n ) return;
        if(board[k][l] == 'O') 
        {
            board[k][l] = '#';
            //check neibours, cannot extend into boundary, why?????
            if((k-1)>0)// && board[k-1][l]=='O') 
                dfs(k-1,l, board);
            if((k+1)< m)// && board[k+1][l]=='O') 
                dfs(k+1,l, board);
            if((l-1)>0 )//&& board[k][l-1]=='O') 
                dfs(k,l-1, board);
            if((l+1)<n)//  && board[k][l+1]=='O') 
                dfs(k,l+1, board);
        }
        else 
            return;
    }
};
