Given a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
  TreeNode* sortedListToBST(ListNode* head) {
    if(head == NULL)
        return NULL;
    ListNode* fast = head;
    ListNode* slow = head;
    ListNode* prev =NULL; 
    while(fast != NULL && fast->next != NULL)
    {
        fast = fast->next->next;
        prev =slow;
        slow=slow->next;
    }
    TreeNode* root = new TreeNode(slow->val);
    if(prev != NULL)
        prev->next = NULL;
    else
        head  = NULL;

    root->left = sortedListToBST(head);
    root->right = sortedListToBST(slow->next);
    return root;
}

 TreeNode* sortedListToBST(ListNode* head) {
        vector<int>nums;
        while(head)
        {
            nums.push_back(head->val);
            head = head->next;
        }
        TreeNode * root = sortedArray(nums,0,nums.size()-1);
        return root;
    }
    TreeNode* sortedArray(vector<int>& nums,int left,int right)
    {
        if(left<=right)
        {
            int mid = (left+right)/2;
            TreeNode*root = new TreeNode(nums[mid]);
            root->left = sortedArray(nums,left,mid-1);
            root->right = sortedArray(nums,mid+1,right);
        }
        else
            return NULL;
    }
};



