/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:


/************** recursive solution from online *****************/
  int maxDepth(TreeNode* root) {
    if( !root )
         return 0;
    return 1 + max( maxDepth( root->left ), maxDepth( root->right ) );
  }

    /******************* BFS solution **********************
    int maxDepth(TreeNode* root) {
        int depth = 0;
        if (!root) return depth;
        queue<TreeNode*> level;
        level.push(root);
        while (!level.empty()) {
            depth++;
            int n = level.size();
            for (int i = 0; i < n; i++) {
                TreeNode* node = level.front();
                level.pop();
                if (node -> left) level.push(node -> left);
                if (node -> right) level.push(node -> right);
            }
        }
        return depth;
    }
    *********************************************************/
    
    /**************** my solution for recursive ****************
     int maxDepth(TreeNode* root) {
      if(root == NULL) return 0;
        max_height = INT_MIN;
        maxDepth_helper(root, 1);
        return max_height;
    }
    void maxDepth_helper(TreeNode*root, int h)
    {
        if(root == NULL )
        {
            if(h>max_height)
               max_height = h;
             return;
        }
        if(root->left || root->right)
        {
             if(root->left)  maxDepth_helper(root->left, h+1);
             if(root->right) maxDepth_helper(root->right,h+1);
        }
        else 
        {
            maxDepth_helper(root->left, h);
            maxDepth_helper(root->right, h);
        }
    }
    private:
    int max_height;
    *************************************************************/
};
