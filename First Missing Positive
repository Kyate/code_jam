/*********************************
 Given an unsorted integer array, find the first missing positive integer.

For example,
Given [1,2,0] return 3,
and [3,4,-1,1] return 2.

Your algorithm should run in O(n) time and uses constant space. 
************************************/
class Solution {
public:
    int firstMissingPositive(vector<int>& nums) {
       int n = nums.size();
       int right,left,max_range,min_range;
       unordered_map<int,bool> mymap;
       bool first = true;
       
       for(int j = 0;j<n;j++)
       if(nums[j]) mymap[nums[j]] = true;
       
       for(int i = 0;i<n;i++)
       {
           if(nums[i]>0)
           {
               int curr = nums[i];
               printf("current value is %d\n",nums[i]);
               while(mymap[curr]) curr++;
               right = curr-1;
               curr = nums[i];
                while(mymap[curr]) curr--;
               left = curr+1;
               
               printf("right = %d, left = %d\n",right,left);
               
               if(first == true)
               {
                   max_range = right;
                   min_range = left;
                   first = false;
               }
               else 
               {
                   if(right!=max_range || left !=min_range)
                   {
                      if(right<min_range) //alway keep the minimum range.
                      {
                          min_range = left;
                          max_range = right;
                      }
                   }
               }
           }
       }
       if(first == true) return 1;
       else
       {
           if(min_range>1) 
            return 1;
           else 
            return max_range+1;
       }
    }
};



class Solution {
public:
    int firstMissingPositive(std::vector<int>& nums) {
        int n = nums.size();
        for (int i = 0; i != n;) {
            if (nums[i] > 0 && nums[i] <= n && nums[i] != nums[nums[i] - 1]) {
                std::swap(nums[i], nums[nums[i] - 1]);
            } else {
                ++i;
            }
        }
        for (int i = 0; i != n; ++i) {
            if (nums[i] != i + 1) {
                return i + 1;
            }
        }
        return n + 1;
    }
};

