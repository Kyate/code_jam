/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    void reorderList(ListNode* head) {
        
        if(head == nullptr)
            return;
            
        if(head->next ==nullptr)
           return;
       
        //compute the half point 
        ListNode*curr = head;
        int n = 0,i=0;
        int half;
        while(curr){n++;curr=curr->next;}
        
        if(n%2==1) half = (n+1)/2;
        else    half = n/2;
        
    
        //get the second half of link list.
        curr = head;
        i = 0;
        while(i<half){i++;curr = curr->next;}
        ListNode *right = curr;
        
        //reverse the second half list
        right  = reversedLinkedList(right);
        print(right);
        
        //link two link list
        curr = head;
        ListNode *next1,*next2;
        for(int i = 0;i<half-1;i++)
        {
            //temp save the next
            next1 = curr->next;
            next2 = right->next;
            
            curr->next = right;
            right->next = next1;
          
            curr = next1;
            right = next2;
        }
        
        //handle the corner case.
        if(n%2==1)
            curr->next =NULL;
        else
        {
            curr->next = right;
            right->next = NULL;
        }
        
    }
    
    
ListNode *reversedLinkedList(ListNode *head)
{
    if(head == NULL) return NULL;

    ListNode *prev = NULL, *current = NULL, *next = NULL;
    current = head;
    while(current != NULL){
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }
    // now let the head point at the last node (prev)
    return prev;
}
    
    void print(ListNode*head)
    {
        while(head!=NULL)
        {
            cout << head->val<<",";
            head= head->next;
        }
        cout << endl;
    }
};
