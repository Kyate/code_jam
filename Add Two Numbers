You are given two linked lists representing two non-negative numbers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8



/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        int extra_bit = 0;
        ListNode *l3 = NULL;
        ListNode *curr = NULL;
        int val;
        while(l1 || l2)
        {
            if(l1&&l2)
            {
                val = l1->val + l2->val + extra_bit;
                if(val>=10) 
                {
                    extra_bit = 1;
                    val = val-10;
                }
                else 
                    extra_bit = 0;
                    
                if(l3==NULL)
                {
                    l3 = new ListNode(val);
                    curr = l3;
                }
                else
                {
                    ListNode *add_node = new ListNode(val);
                    curr->next = add_node;
                    curr = curr->next;
                }
                l1 = l1->next;
                l2 = l2->next;
            }
            else if(l1)
            {
                val = l1->val + extra_bit;
                if(val>=10) { val = val-10;extra_bit = 1;}
                else extra_bit = 0;
                if(l3==NULL)
                {
                    l3 = new ListNode(val);
                    curr = l3;
                }
                else
                {
                    ListNode *add_node = new ListNode(val);
                    curr->next = add_node;
                    curr = curr->next;
                }
                l1 = l1->next;
            }
            else if(l2)
            {
                val = l2->val + extra_bit;
                if(val>=10) { val = val-10;extra_bit = 1;}
                else extra_bit = 0;
                if(l3==NULL)
                {
                    l3 = new ListNode(val);
                    curr = l3;
                }
                else
                {
                    ListNode *add_node = new ListNode(val);
                    curr->next = add_node;
                    curr = curr->next;
                }
                l2 = l2->next;
            }
        }
        if(extra_bit)
        {
            ListNode *add_node = new ListNode(1);
            curr->next = add_node;
            curr = curr->next;
        }
        return l3;
    }
};
